#!/usr/bin/env node

var remote = require('gulp-remote-src');
var vzip = require('gulp-vinyl-zip');
var symdest = require('gulp-symdest');
var path = require('path');
var cp = require('child_process');
var fs = require('fs');

var darwinZipName = 'VSCode-darwin.zip';
var linuxZipName = 'VSCode-linux64.zip';
var baseUrl = 'https://az764295.vo.msecnd.net/public';
var version = process.env.CODE_VERSION || '0.10.5';
var downloadUrl = process.env.CODE_DOWNLOAD_URL || [baseUrl, version, process.platform === 'darwin' ? darwinZipName : linuxZipName].join('/');

var testRunFolder = '.vscode-test';
var testRunFolderAbsolute = path.join(process.cwd(), testRunFolder);
var darwinExecutable = path.join(testRunFolderAbsolute, 'Visual Studio Code.app', 'Contents', 'MacOS', 'Electron');
var linuxExecutable = path.join(testRunFolderAbsolute, 'VSCode-linux-x64', 'Code');

var testsFolder = process.env.CODE_TESTS_PATH || path.join(process.cwd(), 'out', 'test');
var testsWorkspace = process.env.CODE_TESTS_WORKSPACE || testsFolder;

console.log('### VS Code Extension Test Run ###');
console.log('Current working directory: ' + process.cwd());

function runTests () {
    var executable = process.platform === 'darwin' ? darwinExecutable : linuxExecutable;
    var args = [
        testsWorkspace,
        '--extensionDevelopmentPath=' + process.cwd(),
        '--extensionTestsPath=' + testsFolder
    ];

    console.log('Running extension tests: ' + [executable, args.join(' ')].join(' '));

    var cmd = cp.spawn(executable, args);

    cmd.stdout.on('data', function (data) {
        console.log(data.toString());
    });

    cmd.stderr.on('data', function (data) {
        console.error(data.toString());
    });

    cmd.on('error', function (data) {
        console.log('Failed to execute tests: ' + data.toString());
    });

    cmd.on('close', function (code) {
        console.log('Tests exited with code: ' + code);

        if (code !== 0) {
            process.exit(code); // propagate exit code to outer runner
        }
    });
}

function downloadExecutableAndRunTests () {
    console.log('Downloading VS Code into "' + testRunFolderAbsolute + '" from: ' + downloadUrl);

    var stream = remote(downloadUrl, { base: '' })
        .pipe(vzip.src())
        .pipe(symdest(testRunFolder));

    stream.on('end', runTests);
}

fs.exists(testRunFolderAbsolute, function (exists) {
    if (exists) {
        runTests();
    } else {
        downloadExecutableAndRunTests();
    }
});
